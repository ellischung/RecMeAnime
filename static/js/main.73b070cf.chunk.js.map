{"version":3,"sources":["context/search.js","components/Navbar.js","components/AnimeCard.js","components/AnimeList.js","pages/Home.js","components/SingleAnime.js","components/Arrows.js","components/AnimeRec.js","components/RecList.js","pages/Results.js","App.js","index.js"],"names":["SearchContext","createContext","animeData","singleData","recData","scoreData","search","setData","setSingle","setRec","setScore","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","SearchAppBar","classes","history","useHistory","useContext","useState","input","setInput","className","AppBar","Toolbar","style","to","alt","src","process","marginTop","onSubmit","event","preventDefault","length","alert","then","data","results","localStorage","setItem","JSON","stringify","push","InputBase","placeholder","inputProps","value","onChange","target","AnimeCard","props","anime","imageUrl","image_url","score","episodes","synopsis","GridListTile","Link","onClick","fetch","mal_id","response","json","scores","recommendations","Grid","container","item","xs","Paper","maxHeight","Tooltip","placement","arrow","Button","Typography","variant","component","substring","flexWrap","fontSize","paragraph","size","overflow","background","paper","gridList","transform","primary","light","titleBar","AnimeList","GridList","cols","overflowY","map","Home","dataExists","setDataExists","useEffect","undefined","parse","getItem","error","console","log","direction","justify","alignContent","FormControl","type","Input","IconButton","disabled","SingleAnime","info","premiered","rating","open","setOpen","border","Object","keys","class","percentage","Math","round","votes","elevation","Modal","onClose","left","Arrows","margin","AnimeRec","recCount","recommendation_count","RecList","Results","singleExists","setSingleExists","scoreExists","setScoreExists","recExists","setRecExists","Fragment","App","setAnimeData","setSingleData","setRecData","setScoreData","Provider","searchString","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73b070cf.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const SearchContext = createContext({\r\n    animeData: [],\r\n    singleData: {},\r\n    recData: [],\r\n    scoreData: {},\r\n    search: () => {},\r\n    setData: () => {},\r\n    setSingle: () => {},\r\n    setRec: () => {},\r\n    setScore: () => {},\r\n});","import React, { useContext, useState } from 'react';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { AppBar, Toolbar, InputBase, fade, makeStyles } from '@material-ui/core';\r\nimport { SearchContext } from '../context/search';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '12ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function SearchAppBar() {\r\n  const classes = useStyles();\r\n  const history = useHistory(); \r\n  const search = useContext(SearchContext);\r\n  const [input, setInput] = useState('');\r\n\r\n  // handle search results made from the top navbar; redirects to home\r\n  const handleSearch = (event) => {\r\n    event.preventDefault();\r\n    // alert error message and return if input length is less than 3\r\n    if (input.length < 3) {\r\n      alert(\"Search input must be at least 3 characters!\");\r\n      return;\r\n    }\r\n    search.search(input).then((data) => {\r\n      search.setData(data.results);\r\n      localStorage.setItem('myData', JSON.stringify(data.results));\r\n      setInput('');\r\n      history.push('/');\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar style={{backgroundColor: '#a9b2c2'}}>\r\n          <Link to=\"/\" className={classes.title}>\r\n            <img \r\n              alt=\"logo\" \r\n              src={`${process.env.PUBLIC_URL}/RecMeAnime-Logo.png`} \r\n              height={50}\r\n              width={225}\r\n              style={{marginTop: '15px'}} \r\n            />\r\n          </Link>\r\n          <form className={classes.search} onSubmit={handleSearch}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              value={input}\r\n              onChange={(event) => setInput(event.target.value)}\r\n            />\r\n          </form>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React, { useContext } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { SearchContext } from '../context/search';\r\nimport { Typography, Link, Paper, GridListTile, Grid, Tooltip, Button } from '@material-ui/core';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport './AnimeCard.scss';\r\n\r\nconst AnimeCard = (props) => {\r\n    const history = useHistory();\r\n    const search = useContext(SearchContext);\r\n\r\n    // handler for clicking on an anime and redirecting to results page\r\n    const onClickHandler = () => {\r\n        // fetch the anime that was clicked on\r\n        fetch(`https://api.jikan.moe/v3/anime/${props.anime.mal_id}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                search.setSingle(data);\r\n                localStorage.setItem('singleData', JSON.stringify(data));\r\n            });\r\n        // fetch the score stats for said anime\r\n        fetch(`https://api.jikan.moe/v3/anime/${props.anime.mal_id}/stats`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                search.setScore(data.scores);\r\n                localStorage.setItem('scoreData', JSON.stringify(data.scores));\r\n            });\r\n        // fetch the list of recommendations for said anime\r\n        fetch(`https://api.jikan.moe/v3/anime/${props.anime.mal_id}/recommendations`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                search.setRec(data.recommendations);\r\n                localStorage.setItem('recData', JSON.stringify(data.recommendations));\r\n            });\r\n        // push to results after fetches\r\n        history.push('/results');\r\n    };\r\n\r\n    // info to be shown for each individual anime card\r\n    const title = props.anime.title;\r\n    const imageUrl = props.anime.image_url;\r\n    const score = props.anime.score;\r\n    const episodes = props.anime.episodes;\r\n    const synopsis = props.anime.synopsis; \r\n\r\n    return (\r\n        // formatted anime card with info displayed here \r\n        <GridListTile className=\"animeCard__container\">\r\n            <Link onClick={onClickHandler}>\r\n                <Grid container item xs={12}>\r\n                    <Paper className=\"animeCard__paper\">\r\n                        <img src={imageUrl} alt={title} style={{maxHeight: 300}} />\r\n                        <Tooltip title={title} placement=\"top\" arrow>\r\n                            <Button>\r\n                                <Typography variant=\"h6\" component=\"h2\">\r\n                                    {props.anime.title.length > 15 \r\n                                        ? `${props.anime.title.substring(0, 15)}...` \r\n                                        : props.anime.title\r\n                                    }\r\n                                </Typography>\r\n                            </Button>\r\n                        </Tooltip>\r\n                        <Typography variant=\"body2\" component=\"h2\" style={{display: \"flex\", alignItems: \"center\", flexWrap: \"wrap\"}}>\r\n                            <StarBorderIcon fontSize=\"small\" color=\"primary\" />{score}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" component=\"h2\" paragraph={true}>\r\n                            Episodes: {episodes}\r\n                        </Typography>\r\n                        <Tooltip title={synopsis} placement=\"top\" arrow>\r\n                            <Button variant=\"outlined\" color=\"primary\" size=\"small\">\r\n                                <Typography variant=\"body2\" component=\"h2\">\r\n                                    Synopsis\r\n                                </Typography>\r\n                            </Button>\r\n                        </Tooltip>\r\n                    </Paper>\r\n                </Grid>\r\n            </Link>\r\n        </GridListTile>\r\n    );\r\n};\r\n\r\nexport default AnimeCard;","import React from 'react';\r\nimport AnimeCard from './AnimeCard';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\n\r\n// styling for the grid list from material-ui\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-around',\r\n      width: '100%',\r\n      overflow: 'hidden',\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n      flexWrap: 'nowrap',\r\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n      transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n      color: theme.palette.primary.light,\r\n    },\r\n    titleBar: {\r\n      background:\r\n        'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n    },\r\n}));\r\n\r\nconst AnimeList = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      // Returns list of anime from search results (list of anime card components)\r\n      <div className={classes.root}>\r\n        <GridList className={classes.gridList} cols={2.5} style={{overflowY: \"scroll\"}}>\r\n          {props.data !== null &&\r\n            props.data.map((anime) => (\r\n              <AnimeCard key={anime.mal_id} anime={anime} />\r\n            ))\r\n          }\r\n        </GridList>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default AnimeList;","import React, { useContext, useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { SearchContext } from '../context/search';\r\nimport { FormControl, Input, IconButton, Grid } from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AnimeList from '../components/AnimeList';\r\nimport './Home.scss';\r\n\r\nconst Home = () => {\r\n    const history = useHistory();\r\n    const search = useContext(SearchContext);\r\n    const [input, setInput] = useState('');\r\n    const [dataExists, setDataExists] = useState(true);\r\n\r\n    // Constantly checks to see if anime data exists\r\n    // Pull from local storage if it doesn't exist; if none from local storage, log error\r\n    useEffect(() => {\r\n        if (search.animeData === undefined /*|| search.animeData.length === 0*/) {\r\n            try {\r\n                search.setData(JSON.parse(localStorage.getItem('myData')));\r\n                setDataExists(true);\r\n            } catch (error) {\r\n                console.log(error);\r\n                setDataExists(false);\r\n            }\r\n        }\r\n    }, [search]);\r\n\r\n    // Search functionality \r\n    const handleSearch = (event) => {\r\n        event.preventDefault();\r\n        // alert error message and return if input length is less than 3\r\n        if (input.length < 3) {\r\n            alert(\"Search input must be at least 3 characters!\");\r\n            return;\r\n        }\r\n        search.search(input).then((data) => {\r\n            search.setData(data.results);\r\n            localStorage.setItem('myData', JSON.stringify(data.results));\r\n            history.push('/');\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Grid \r\n            container \r\n            direction=\"column\" \r\n            justify=\"center\" \r\n            alignContent=\"center\" \r\n            alignItems=\"center\"\r\n        >\r\n            {/* Grid item for site logo + search bar */}\r\n            <Grid item>\r\n                {/* Custom site logo */}\r\n                <Grid item>\r\n                    <img \r\n                        alt=\"logo\" \r\n                        src={`${process.env.PUBLIC_URL}/watching-anime.gif`} \r\n                        height={250} \r\n                        width={500} \r\n                        style={{marginTop: '20px'}}\r\n                    />\r\n                </Grid>\r\n                {/* Search bar from material-ui */}\r\n                <Grid item>\r\n                    <form className=\"home__form\">\r\n                        <FormControl type=\"submit\" className=\"home__formControl\">\r\n                            <Input \r\n                                placeholder=\"Search for any anime!\" \r\n                                value={input} \r\n                                onChange={(event) => setInput(event.target.value)}\r\n                                className=\"home__input\" \r\n                            />\r\n                            <IconButton \r\n                                variant=\"contained\" \r\n                                color=\"primary\" \r\n                                type=\"submit\" \r\n                                disabled={!input} \r\n                                onClick={handleSearch}\r\n                                className=\"home__iconButton\"\r\n                            >\r\n                                <SearchIcon/>\r\n                            </IconButton>\r\n                        </FormControl>\r\n                    </form>    \r\n                </Grid>   \r\n            </Grid>\r\n            {/* Display search results (limit card components to 20) */}\r\n            <Grid container style={{marginTop: '50px', overflowY: 'scroll'}}>\r\n                {dataExists && <AnimeList data={search.animeData} />}\r\n            </Grid> \r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Home;","import React, { useState } from 'react';\r\nimport { Grid, Typography, Paper, Button, Modal} from \"@material-ui/core\";\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport './SingleAnime.scss'\r\n\r\nconst SingleAnime = (props) => {\r\n    // information to be displayed for each anime\r\n    const {title, image_url, score, episodes, premiered, rating, synopsis} = props.info;\r\n\r\n    // state hook for modal\r\n    const [open, setOpen] = useState(false);\r\n    \r\n    // open modal handler function\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    // close modal handler function\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    // score stats to be displayed by modal\r\n    const scores = (\r\n        <div style={{width: \"800px\", backgroundColor: \"white\", border: \"2px solid #000000\"}}>\r\n            {/* Bar graph taken from css-tricks */}\r\n            <dl>\r\n                {Object.keys(props.scores).map((score) => (\r\n                    // each bar's individual percentage and length mapped out here\r\n                    <dd \r\n                        class={\r\n                            `percentage percentage-${\r\n                                props.scores[score].percentage < 1 \r\n                                    ? 1\r\n                                    : Math.round(props.scores[score].percentage)\r\n                            }`\r\n                        }\r\n                    >\r\n                        {/* Text next to each bar */}\r\n                        <span class=\"score__text\">\r\n                            <Typography variant=\"h6\" component=\"h2\" style={{marginRight: \"10px\"}}>{score}:</Typography> \r\n                            {props.scores[score].votes} votes ({props.scores[score].percentage}%)  \r\n                        </span>\r\n                    </dd>\r\n                ))}\r\n            </dl>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        // display the single anime with all of the information from props\r\n        <Grid\r\n            container\r\n            spacing={10}\r\n            direction=\"row\" \r\n            justify=\"center\" \r\n            alignItems=\"center\" \r\n            alignContent=\"center\"\r\n            className=\"singleAnime__container\"\r\n        >\r\n            <Grid item>\r\n                <img src={image_url} alt={title} className=\"singleAnime__image\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Paper elevation={3} className=\"singleAnime__description\">\r\n                    <Typography variant=\"h4\" component=\"h2\">\r\n                        {title}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\" style={{display: \"flex\", alignItems: \"center\", flexWrap: \"wrap\"}}>\r\n                        <StarBorderIcon fontSize=\"medium\" color=\"primary\" />\r\n                        {score}\r\n                        {/* Modal for stats */}\r\n                        <div>\r\n                            <Button onClick={handleOpen} variant=\"outlined\" color=\"primary\" size=\"small\" style={{marginLeft: \"20px\"}}>\r\n                                <Typography variant=\"body2\" component=\"h2\">\r\n                                    Score stats\r\n                                </Typography>\r\n                            </Button>\r\n                            <Modal\r\n                                open={open}\r\n                                onClose={handleClose}\r\n                                style={{\r\n                                    display: \"flex\", \r\n                                    alignItems: \"center\", \r\n                                    flexWrap: \"wrap\", \r\n                                    left: \"30%\"\r\n                                }}\r\n                            >\r\n                                {scores}\r\n                            </Modal>\r\n                        </div>\r\n                        {/* End of modal for stats */}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        Episodes: {episodes}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        Premiered: {premiered}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\" paragraph={true}>\r\n                        Rating: {rating}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\" style={{width: 1000}}>\r\n                        {synopsis}\r\n                    </Typography>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SingleAnime;","import React from 'react';\r\nimport { Grid } from \"@material-ui/core\";\r\nimport './Arrows.scss';\r\n\r\nconst Arrows = () => {\r\n    // for down arrow mapping\r\n    const arrows = ['first', 'second', 'third'];\r\n\r\n    return (\r\n        // animated down arrows, keyframes credits to ramachandra\r\n        <Grid\r\n            container\r\n            direction=\"row\" \r\n            justify=\"center\" \r\n            alignItems=\"center\" \r\n            alignContent=\"center\"\r\n            className=\"arrow__container\"\r\n        >\r\n            {arrows.map(() => {\r\n                return <Grid item className=\"arrow__down\" style={{margin: \"50px\"}}>\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Arrows;","import React, { useContext } from 'react';\r\nimport { SearchContext } from '../context/search';\r\nimport { Typography, Link, Paper, GridListTile, Grid, Tooltip, Button } from '@material-ui/core';\r\nimport './AnimeRec.scss';\r\n\r\nconst AnimeRec = (props) => {\r\n    const search = useContext(SearchContext);\r\n\r\n    // handler for clicking on an anime rec (stays on results page)\r\n    const onClickHandler = () => {\r\n        // fetch the anime that was clicked on\r\n        fetch(`https://api.jikan.moe/v3/anime/${props.anime.mal_id}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                search.setSingle(data);\r\n                localStorage.setItem('singleData', JSON.stringify(data));\r\n            });\r\n        // fetch the score stats for said anime\r\n        fetch(`https://api.jikan.moe/v3/anime/${props.anime.mal_id}/stats`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                search.setScore(data.scores);\r\n                localStorage.setItem('scoreData', JSON.stringify(data.scores));\r\n            });\r\n        // fetch the list of recommendations for said anime\r\n        fetch(`https://api.jikan.moe/v3/anime/${props.anime.mal_id}/recommendations`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                search.setRec(data.recommendations);\r\n                localStorage.setItem('recData', JSON.stringify(data.recommendations));\r\n            })\r\n    };\r\n\r\n    // info to be shown for each individual anime rec\r\n    const title = props.anime.title;\r\n    const imageUrl = props.anime.image_url;\r\n    const recCount = props.anime.recommendation_count; \r\n\r\n    return (\r\n        // formatted anime rec with info displayed here \r\n        <GridListTile className=\"animeRec__container\">\r\n            <Link onClick={onClickHandler}>\r\n                <Grid container item xs={12}>\r\n                    <Paper className=\"animeRec__paper\">\r\n                        <img src={imageUrl} alt={title} style={{maxHeight: 300}} />\r\n                        <Tooltip title={title} placement=\"top\" arrow>\r\n                            <Button>\r\n                                <Typography variant=\"h6\" component=\"h2\">\r\n                                    {props.anime.title.length > 15 \r\n                                        ? `${props.anime.title.substring(0, 15)}...` \r\n                                        : props.anime.title\r\n                                    }\r\n                                </Typography>\r\n                            </Button>\r\n                        </Tooltip>\r\n                        <Typography variant=\"body2\" component=\"h2\" style={{display: \"flex\", alignItems: \"center\", flexWrap: \"wrap\"}}>\r\n                            User recommendations:\r\n                            <Typography color=\"primary\" variant=\"h6\" component=\"h2\" style={{marginLeft: \"5px\"}}>{recCount}</Typography>\r\n                        </Typography>\r\n                    </Paper>\r\n                </Grid>\r\n            </Link>\r\n        </GridListTile>\r\n    );\r\n};\r\n\r\nexport default AnimeRec;","import React from 'react';\r\nimport AnimeRec from './AnimeRec';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\n\r\n// styling for the grid list from material-ui\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-around',\r\n      width: '100%',\r\n      overflow: 'hidden',\r\n      backgroundColor: theme.palette.background.paper,\r\n      marginTop: '75px',\r\n    },\r\n    gridList: {\r\n      flexWrap: 'nowrap',\r\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n      transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n      color: theme.palette.primary.light,\r\n    },\r\n    titleBar: {\r\n      background:\r\n        'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n    },\r\n}));\r\n\r\nconst RecList = (props) => {\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n      // Returns list of anime from recommendations data (individual rec cards)\r\n      <div className={classes.root}>\r\n        <GridList className={classes.gridList} cols={2.5} style={{overflowY: \"scroll\"}}>\r\n          {props.data !== null &&\r\n            props.data.map((anime) => (\r\n              <AnimeRec key={anime.mal_id} anime={anime} />\r\n            ))\r\n          }\r\n        </GridList>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default RecList;","import React, { useState, useEffect, useContext } from 'react';\r\nimport { SearchContext } from '../context/search';\r\nimport { Typography } from '@material-ui/core';\r\nimport SingleAnime from '../components/SingleAnime';\r\nimport Arrows from '../components/Arrows';\r\nimport RecList from '../components/RecList';\r\n\r\nconst Results = () => {\r\n    const search = useContext(SearchContext);\r\n    const [singleExists, setSingleExists] = useState(true);\r\n    const [scoreExists, setScoreExists] = useState(true);\r\n    const [recExists, setRecExists] = useState(true);\r\n\r\n    // Constantly checks to see if data exists for single anime, scores, and recommendations\r\n    // Pull from local storage if it doesn't exist; if none from local storage, log error\r\n    useEffect(() => {\r\n        // check if single anime data exists\r\n        if(search.singleData === undefined || Object.keys(search.singleData).length === 0) {\r\n            try {\r\n                search.setSingle(JSON.parse(localStorage.getItem('singleData')));\r\n                setSingleExists(true);\r\n            } catch (error) {\r\n                console.log(error);\r\n                setSingleExists(false);\r\n            }\r\n        }\r\n        // check if score data exists\r\n        if(search.scoreData === undefined || Object.keys(search.scoreData).length === 0) {\r\n            try {\r\n                search.setScore(JSON.parse(localStorage.getItem('scoreData')));\r\n                setScoreExists(true);\r\n            } catch (error) {\r\n                console.log(error);\r\n                setScoreExists(false);\r\n            }\r\n        }\r\n        // check if recommendations data exists\r\n        if(search.recData === undefined) {\r\n            try {\r\n                search.setRec(JSON.parse(localStorage.getItem('recData')));\r\n                setRecExists(true);\r\n            } catch (error) {\r\n                console.log(error);\r\n                setRecExists(false);\r\n            }\r\n        }\r\n    }, [search]);\r\n\r\n    return (\r\n        // display single anime + down arrows + recommendations\r\n        <React.Fragment>\r\n            {/* single anime w/ scores */}\r\n            {(singleExists && scoreExists\r\n                ? <SingleAnime info={search.singleData} scores={search.scoreData} />\r\n                : <Typography variant=\"h4\" component=\"h2\">Data does not exist</Typography>\r\n            )}\r\n            {/* down arrows */}\r\n            <Arrows />\r\n            {/* recommendations */}\r\n            {(recExists \r\n                ? <RecList data={search.recData} />\r\n                : <Typography variant=\"h4\" component=\"h2\">Data does not exist</Typography>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Results;","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Home from './pages/Home';\nimport Results from './pages/Results';\nimport { SearchContext } from './context/search';\n\nfunction App() {\n  // Store all of the anime data we receive from the API here\n  const [animeData, setAnimeData] = useState([]);\n  const [singleData, setSingleData] = useState({});\n  const [recData, setRecData] = useState([]);\n  const [scoreData, setScoreData] = useState({});\n\n  // Set data from search\n  const setData = (data) => {\n    setAnimeData(data);\n  };\n\n  // set data for single anime\n  const setSingle = (data) => {\n    setSingleData(data);\n  };\n\n  // set data for recommendations\n  const setRec = (data) => {\n    setRecData(data);\n  };\n\n  // set data for single anime score\n  const setScore = (data) => {\n    setScoreData(data);\n  }\n\n  // Search from myanimelist's API\n  const search = (searchString) => {\n    return fetch(\n      `https://api.jikan.moe/v3/search/anime?q=${searchString}&limit=20`\n    ).then((response) => response.json());\n  };\n\n  return (\n    <SearchContext.Provider \n      value={{search, animeData, setData, singleData, setSingle, recData, setRec, scoreData, setScore}}\n    >\n    <Router>\n      {/* Navigation bar with home redirect and search */} \n      <Navbar />\n      {/* Main content of website with routes */}\n      <main>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"/results\" exact>\n            <Results />\n          </Route>\n          <Redirect to=\"/\" />\n        </Switch>\n      </main>\n    </Router>\n    </SearchContext.Provider>\n  );\n}\n\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}